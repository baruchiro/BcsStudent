# Project Context
Converting a Vue/Nuxt static blog site to Next.js with the following structure:
- Source Vue/Nuxt code is in `src/` directory
- Target Next.js code will be in `app/`, `components/`, and `layouts/` directories
- Using Contentlayer for MDX processing
- Using Tailwind CSS for styling
- Supporting RTL (Hebrew) and LTR (English) content

# Key Migration Points

1. **Page Structure**
- Vue pages (`src/pages/`) → Next.js app router (`app/`)
- Vue templates (`src/templates/`) → Next.js layouts (`layouts/`)
- Vue components (`src/components/`) → Next.js components (`components/`)

2. **Content Management**
- Vue GraphQL queries → Contentlayer for MDX/markdown processing
- Content schema defined in `contentlayer.config.ts`
```typescript:contentlayer.config.ts
startLine: 57
endLine: 76
```

3. **Routing**
- Vue router → Next.js App Router with dynamic routes
- Blog post routing example:
```typescript:app/blog/[...slug]/page.tsx
startLine: 77
endLine: 124
```

4. **Layout System**
- Vue default layout → Next.js root layout
- Blog post layouts defined in `layouts/` directory
- Support for multiple layout types (PostLayout, PostSimple, ListLayout)

5. **Metadata & SEO**
- Vue metaInfo → Next.js Metadata API
```typescript:app/layout.tsx
startLine: 20
endLine: 58
```

6. **Internationalization**
- RTL/LTR support maintained through layout configuration
- Language detection and direction setting
- Custom DirectionWrapper component for content

7. **Theme & Styling**
- SCSS → Tailwind CSS
- Dark/light theme support preserved
- Responsive design patterns maintained

This context should be used as a base reference for specific migration tasks and questions.
